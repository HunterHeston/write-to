// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

////////////////////////
// NextAuth.js Models
////////////////////////
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

////////////////////////
// Application models
////////////////////////
enum PostVisibility {
  PUBLIC
  APPROVED_FOLLOWERS
  PRIVATE
}

model Post {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  title      String
  slug       String
  content    String         @db.Text
  visibility PostVisibility @default(PRIVATE)

  // the profile that made this post
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
}

model Profile {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio       String?
  avatar    String?

  // the next-auth user this profile is associated with
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // all the post a user has made
  Post Post[]

  // Followers and Following of this profile.
  followedBy ProfileFollower[] @relation("FollowerRel")
  following  ProfileFollower[] @relation("FollowingRel")

  // profiles that have requested to follow this profile.
  requester  FollowRequest[] @relation("RequestedRel")
  requesting FollowRequest[] @relation("RequestingRel")
}

model ProfileFollower {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // the profile that is being followed
  followingId String
  following   Profile @relation("FollowingRel", fields: [followingId], references: [id])

  // the profile that is following
  followerId String
  follower   Profile @relation("FollowerRel", fields: [followerId], references: [id])
}

model FollowRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  requestor   Profile? @relation("RequestedRel", fields: [requestorId], references: [id])
  requestorId String?  @unique

  requesting   Profile? @relation("RequestingRel", fields: [requestingId], references: [id])
  requestingId String?  @unique
}
